name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: code_runner_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.5' # From your Dockerfile

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Go tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_TEST_DB: code_runner_test_db
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..5}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready."
              break
            fi
            echo "PostgreSQL not ready yet (attempt $i/5), waiting 5s..."
            sleep 5
            if [ $i -eq 5 ]; then
              echo "PostgreSQL did not become ready after 25s."
              exit 1
            fi
          done
          go test -v ./...

      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for EC2 (linux/amd64)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker build \
            --platform linux/amd64 \
            --tag code-runner:${{ github.sha }} \
            --tag code-runner:latest \
            -f prod.DockerFile \
            .
